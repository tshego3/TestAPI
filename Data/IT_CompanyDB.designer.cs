#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestAPI.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IT_CompanyWebAPI")]
	public partial class IT_CompanyDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion
		
		public IT_CompanyDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IT_CompanyDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IT_CompanyDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IT_CompanyDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IT_CompanyDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employeeID;
		
		private string _tbFirstName;
		
		private string _tbSurname;
		
		private string _tbTellNo;
		
		private string _tbEmail;
		
		private string _UserID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OntbFirstNameChanging(string value);
    partial void OntbFirstNameChanged();
    partial void OntbSurnameChanging(string value);
    partial void OntbSurnameChanged();
    partial void OntbTellNoChanging(string value);
    partial void OntbTellNoChanged();
    partial void OntbEmailChanging(string value);
    partial void OntbEmailChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tbFirstName", DbType="VarChar(25)")]
		public string tbFirstName
		{
			get
			{
				return this._tbFirstName;
			}
			set
			{
				if ((this._tbFirstName != value))
				{
					this.OntbFirstNameChanging(value);
					this.SendPropertyChanging();
					this._tbFirstName = value;
					this.SendPropertyChanged("tbFirstName");
					this.OntbFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tbSurname", DbType="VarChar(255)")]
		public string tbSurname
		{
			get
			{
				return this._tbSurname;
			}
			set
			{
				if ((this._tbSurname != value))
				{
					this.OntbSurnameChanging(value);
					this.SendPropertyChanging();
					this._tbSurname = value;
					this.SendPropertyChanged("tbSurname");
					this.OntbSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tbTellNo", DbType="VarChar(10)")]
		public string tbTellNo
		{
			get
			{
				return this._tbTellNo;
			}
			set
			{
				if ((this._tbTellNo != value))
				{
					this.OntbTellNoChanging(value);
					this.SendPropertyChanging();
					this._tbTellNo = value;
					this.SendPropertyChanged("tbTellNo");
					this.OntbTellNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tbEmail", DbType="VarChar(255)")]
		public string tbEmail
		{
			get
			{
				return this._tbEmail;
			}
			set
			{
				if ((this._tbEmail != value))
				{
					this.OntbEmailChanging(value);
					this.SendPropertyChanging();
					this._tbEmail = value;
					this.SendPropertyChanged("tbEmail");
					this.OntbEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
